from LinearRegressionModel import linear_regression_model

import numpy as np
import pandas as pd
import sklearn

from sklearn.datasets import load_boston
boston = load_boston()

boston
boston['feature_names']
boston['data'].shape
bost = pd.DataFrame(boston['data'])
bost.head()
bost.columns = boston['feature_names']
bost.head()
X = (bost - bost.mean())/(bost.max() -bost.min())
X.describe()
X.head()
y = boston['target']
y.shape
from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_slpit(X,Y,test_size = 0.33, random_state = 5)
X_train.shape
X_train = X_train.T
X_train.shape
y_train.shape
y_train = np.array([y_train])
y_train.shape
X_val = X_val.T
X_val.shape
y_val = np.array([y_val])
y_val.shape
linear_regression_model(X_train,y_train,X_val,y_val,0.4,500)

from sklearn import linear_model
linear_regression = linear_model.LinearRegression()
model = linear_regression.fit(X_train.T,y_train.T)
predictions = linear_regression.preedict(X_val.T)
predictions.shape
MAE_val_with_sklearn = (1/y_val.shape[1])*np.sum(np.abs(predictions-y_val.T))
MAE_val_with_sklearn
